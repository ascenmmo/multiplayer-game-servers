// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package multiplayer

import (
	"context"
	"fmt"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/clients/multiplayer/hasher"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/clients/multiplayer/jsonrpc"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/google/uuid"
)

type ClientDevToolsServer struct {
	*ClientJsonRPC
}

type retDevToolsServerAddServer = func(err error)
type retDevToolsServerGetServers = func(servers []types.Server, err error)
type retDevToolsServerDeleteServers = func(err error)

func (cli *ClientDevToolsServer) AddServer(ctx context.Context, token string, name string, address string) (err error) {

	request := requestDevToolsServerAddServer{
		Address: address,
		Name:    name,
		Token:   token,
	}
	var response responseDevToolsServerAddServer
	var rpcResponse *jsonrpc.ResponseRPC
	cacheKey, _ := hasher.Hash(request)
	rpcResponse, err = cli.rpc.Call(ctx, "devtoolsserver.addserver", request)
	var fallbackCheck func(error) bool
	if cli.fallbackDevToolsServer != nil {
		fallbackCheck = cli.fallbackDevToolsServer.AddServer
	}
	if rpcResponse != nil && rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
	}
	if err = cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response); err != nil {
		return
	}
	return err
}

func (cli *ClientDevToolsServer) ReqAddServer(ctx context.Context, callback retDevToolsServerAddServer, token string, name string, address string) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "devtoolsserver.addserver",
		Params: requestDevToolsServerAddServer{
			Address: address,
			Name:    name,
			Token:   token,
		},
	}}
	if callback != nil {
		var response responseDevToolsServerAddServer
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			cacheKey, _ := hasher.Hash(request.rpcRequest.Params)
			var fallbackCheck func(error) bool
			if cli.fallbackDevToolsServer != nil {
				fallbackCheck = cli.fallbackDevToolsServer.AddServer
			}
			if rpcResponse != nil && rpcResponse.Error != nil {
				if cli.errorDecoder != nil {
					err = cli.errorDecoder(rpcResponse.Error.Raw())
				} else {
					err = fmt.Errorf(rpcResponse.Error.Message)
				}
			}
			callback(cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response))
		}
	}
	return
}

func (cli *ClientDevToolsServer) GetServers(ctx context.Context, token string) (servers []types.Server, err error) {

	request := requestDevToolsServerGetServers{Token: token}
	var response responseDevToolsServerGetServers
	var rpcResponse *jsonrpc.ResponseRPC
	cacheKey, _ := hasher.Hash(request)
	rpcResponse, err = cli.rpc.Call(ctx, "devtoolsserver.getservers", request)
	var fallbackCheck func(error) bool
	if cli.fallbackDevToolsServer != nil {
		fallbackCheck = cli.fallbackDevToolsServer.GetServers
	}
	if rpcResponse != nil && rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
	}
	if err = cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response); err != nil {
		return
	}
	return response.Servers, err
}

func (cli *ClientDevToolsServer) ReqGetServers(ctx context.Context, callback retDevToolsServerGetServers, token string) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "devtoolsserver.getservers",
		Params:  requestDevToolsServerGetServers{Token: token},
	}}
	if callback != nil {
		var response responseDevToolsServerGetServers
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			cacheKey, _ := hasher.Hash(request.rpcRequest.Params)
			var fallbackCheck func(error) bool
			if cli.fallbackDevToolsServer != nil {
				fallbackCheck = cli.fallbackDevToolsServer.GetServers
			}
			if rpcResponse != nil && rpcResponse.Error != nil {
				if cli.errorDecoder != nil {
					err = cli.errorDecoder(rpcResponse.Error.Raw())
				} else {
					err = fmt.Errorf(rpcResponse.Error.Message)
				}
			}
			callback(response.Servers, cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response))
		}
	}
	return
}

func (cli *ClientDevToolsServer) DeleteServers(ctx context.Context, token string, serverID uuid.UUID) (err error) {

	request := requestDevToolsServerDeleteServers{
		ServerID: serverID,
		Token:    token,
	}
	var response responseDevToolsServerDeleteServers
	var rpcResponse *jsonrpc.ResponseRPC
	cacheKey, _ := hasher.Hash(request)
	rpcResponse, err = cli.rpc.Call(ctx, "devtoolsserver.deleteservers", request)
	var fallbackCheck func(error) bool
	if cli.fallbackDevToolsServer != nil {
		fallbackCheck = cli.fallbackDevToolsServer.DeleteServers
	}
	if rpcResponse != nil && rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
	}
	if err = cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response); err != nil {
		return
	}
	return err
}

func (cli *ClientDevToolsServer) ReqDeleteServers(ctx context.Context, callback retDevToolsServerDeleteServers, token string, serverID uuid.UUID) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "devtoolsserver.deleteservers",
		Params: requestDevToolsServerDeleteServers{
			ServerID: serverID,
			Token:    token,
		},
	}}
	if callback != nil {
		var response responseDevToolsServerDeleteServers
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			cacheKey, _ := hasher.Hash(request.rpcRequest.Params)
			var fallbackCheck func(error) bool
			if cli.fallbackDevToolsServer != nil {
				fallbackCheck = cli.fallbackDevToolsServer.DeleteServers
			}
			if rpcResponse != nil && rpcResponse.Error != nil {
				if cli.errorDecoder != nil {
					err = cli.errorDecoder(rpcResponse.Error.Raw())
				} else {
					err = fmt.Errorf(rpcResponse.Error.Message)
				}
			}
			callback(cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response))
		}
	}
	return
}
