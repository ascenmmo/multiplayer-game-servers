// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"strconv"
	"time"

	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/google/uuid"
)

type metricsDevToolsClient struct {
	next multiplayer.DevToolsClient
}

func metricsMiddlewareDevToolsClient(next multiplayer.DevToolsClient) multiplayer.DevToolsClient {
	return &metricsDevToolsClient{next: next}
}

func (m metricsDevToolsClient) SignUp(ctx context.Context, client types.Client) (token string, refresh string, err error) {

	defer func(_begin time.Time) {
		var (
			success = true
			errCode int
		)
		if err != nil {
			success = false
			errCode = internalError
			ec, ok := err.(withErrorCode)
			if ok {
				errCode = ec.Code()
			}
		}
		RequestCount.WithLabelValues("devToolsClient", "signUp", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestCountAll.WithLabelValues("devToolsClient", "signUp", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestLatency.WithLabelValues("devToolsClient", "signUp", strconv.FormatBool(success), strconv.Itoa(errCode)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	return m.next.SignUp(ctx, client)
}

func (m metricsDevToolsClient) SignIn(ctx context.Context, client types.Client) (token string, refresh string, err error) {

	defer func(_begin time.Time) {
		var (
			success = true
			errCode int
		)
		if err != nil {
			success = false
			errCode = internalError
			ec, ok := err.(withErrorCode)
			if ok {
				errCode = ec.Code()
			}
		}
		RequestCount.WithLabelValues("devToolsClient", "signIn", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestCountAll.WithLabelValues("devToolsClient", "signIn", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestLatency.WithLabelValues("devToolsClient", "signIn", strconv.FormatBool(success), strconv.Itoa(errCode)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	return m.next.SignIn(ctx, client)
}

func (m metricsDevToolsClient) RefreshToken(ctx context.Context, token string, refresh string) (newToken string, newRefresh string, err error) {

	defer func(_begin time.Time) {
		var (
			success = true
			errCode int
		)
		if err != nil {
			success = false
			errCode = internalError
			ec, ok := err.(withErrorCode)
			if ok {
				errCode = ec.Code()
			}
		}
		RequestCount.WithLabelValues("devToolsClient", "refreshToken", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestCountAll.WithLabelValues("devToolsClient", "refreshToken", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestLatency.WithLabelValues("devToolsClient", "refreshToken", strconv.FormatBool(success), strconv.Itoa(errCode)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	return m.next.RefreshToken(ctx, token, refresh)
}

func (m metricsDevToolsClient) GetClient(ctx context.Context, token string, gameID uuid.UUID) (client types.Client, err error) {

	defer func(_begin time.Time) {
		var (
			success = true
			errCode int
		)
		if err != nil {
			success = false
			errCode = internalError
			ec, ok := err.(withErrorCode)
			if ok {
				errCode = ec.Code()
			}
		}
		RequestCount.WithLabelValues("devToolsClient", "getClient", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestCountAll.WithLabelValues("devToolsClient", "getClient", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestLatency.WithLabelValues("devToolsClient", "getClient", strconv.FormatBool(success), strconv.Itoa(errCode)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	return m.next.GetClient(ctx, token, gameID)
}

func (m metricsDevToolsClient) UpdateClient(ctx context.Context, token string, client types.Client) (err error) {

	defer func(_begin time.Time) {
		var (
			success = true
			errCode int
		)
		if err != nil {
			success = false
			errCode = internalError
			ec, ok := err.(withErrorCode)
			if ok {
				errCode = ec.Code()
			}
		}
		RequestCount.WithLabelValues("devToolsClient", "updateClient", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestCountAll.WithLabelValues("devToolsClient", "updateClient", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestLatency.WithLabelValues("devToolsClient", "updateClient", strconv.FormatBool(success), strconv.Itoa(errCode)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	return m.next.UpdateClient(ctx, token, client)
}

func (m metricsDevToolsClient) GetGameSaves(ctx context.Context, token string) (gameSaves types.GameSaves, err error) {

	defer func(_begin time.Time) {
		var (
			success = true
			errCode int
		)
		if err != nil {
			success = false
			errCode = internalError
			ec, ok := err.(withErrorCode)
			if ok {
				errCode = ec.Code()
			}
		}
		RequestCount.WithLabelValues("devToolsClient", "getGameSaves", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestCountAll.WithLabelValues("devToolsClient", "getGameSaves", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestLatency.WithLabelValues("devToolsClient", "getGameSaves", strconv.FormatBool(success), strconv.Itoa(errCode)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	return m.next.GetGameSaves(ctx, token)
}

func (m metricsDevToolsClient) SetGameSaves(ctx context.Context, token string, gameSaves types.GameSaves) (err error) {

	defer func(_begin time.Time) {
		var (
			success = true
			errCode int
		)
		if err != nil {
			success = false
			errCode = internalError
			ec, ok := err.(withErrorCode)
			if ok {
				errCode = ec.Code()
			}
		}
		RequestCount.WithLabelValues("devToolsClient", "setGameSaves", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestCountAll.WithLabelValues("devToolsClient", "setGameSaves", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestLatency.WithLabelValues("devToolsClient", "setGameSaves", strconv.FormatBool(success), strconv.Itoa(errCode)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	return m.next.SetGameSaves(ctx, token, gameSaves)
}

func (m metricsDevToolsClient) DeleteGameSaves(ctx context.Context, token string) (err error) {

	defer func(_begin time.Time) {
		var (
			success = true
			errCode int
		)
		if err != nil {
			success = false
			errCode = internalError
			ec, ok := err.(withErrorCode)
			if ok {
				errCode = ec.Code()
			}
		}
		RequestCount.WithLabelValues("devToolsClient", "deleteGameSaves", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestCountAll.WithLabelValues("devToolsClient", "deleteGameSaves", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestLatency.WithLabelValues("devToolsClient", "deleteGameSaves", strconv.FormatBool(success), strconv.Itoa(errCode)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	return m.next.DeleteGameSaves(ctx, token)
}
