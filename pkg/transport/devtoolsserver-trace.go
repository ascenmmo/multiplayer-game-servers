// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"fmt"

	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/google/uuid"
	otel "go.opentelemetry.io/otel"
	trace "go.opentelemetry.io/otel/trace"
)

type traceDevToolsServer struct {
	next multiplayer.DevToolsServer
}

func traceMiddlewareDevToolsServer(next multiplayer.DevToolsServer) multiplayer.DevToolsServer {
	return &traceDevToolsServer{next: next}
}

func (svc traceDevToolsServer) AddServer(ctx context.Context, token string, name string, address string) (err error) {

	var span trace.Span
	ctx, span = otel.Tracer(fmt.Sprintf("tg:%s", VersionTg)).Start(ctx, "devToolsServer.addServer")
	defer func() {
		span.RecordError(err)
		span.End()
	}()
	return svc.next.AddServer(ctx, token, name, address)
}

func (svc traceDevToolsServer) GetServers(ctx context.Context, token string) (servers []types.Server, err error) {

	var span trace.Span
	ctx, span = otel.Tracer(fmt.Sprintf("tg:%s", VersionTg)).Start(ctx, "devToolsServer.getServers")
	defer func() {
		span.RecordError(err)
		span.End()
	}()
	return svc.next.GetServers(ctx, token)
}

func (svc traceDevToolsServer) DeleteServers(ctx context.Context, token string, serverID uuid.UUID) (err error) {

	var span trace.Span
	ctx, span = otel.Tracer(fmt.Sprintf("tg:%s", VersionTg)).Start(ctx, "devToolsServer.deleteServers")
	defer func() {
		span.RecordError(err)
		span.End()
	}()
	return svc.next.DeleteServers(ctx, token, serverID)
}
