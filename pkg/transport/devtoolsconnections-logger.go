// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/transport/viewer"
	"github.com/google/uuid"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"time"
)

type loggerDevToolsConnections struct {
	next multiplayer.DevToolsConnections
}

func loggerMiddlewareDevToolsConnections() MiddlewareDevToolsConnections {
	return func(next multiplayer.DevToolsConnections) multiplayer.DevToolsConnections {
		return &loggerDevToolsConnections{next: next}
	}
}

func (m loggerDevToolsConnections) CreateRoom(ctx context.Context, token string, name string) (newToken string, err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsConnections").Str("method", "createRoom").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestDevToolsConnectionsCreateRoom{
					Name:  name,
					Token: token,
				}),
				"response": viewer.Sprintf("%+v", responseDevToolsConnectionsCreateRoom{NewToken: newToken}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call createRoom")
			return
		}
		logger.Info().Func(logHandle).Msg("call createRoom")
	}(time.Now())
	return m.next.CreateRoom(ctx, token, name)
}

func (m loggerDevToolsConnections) GetRoomsAll(ctx context.Context, token string) (rooms []types.Room, err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsConnections").Str("method", "getRoomsAll").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request":  viewer.Sprintf("%+v", requestDevToolsConnectionsGetRoomsAll{Token: token}),
				"response": viewer.Sprintf("%+v", responseDevToolsConnectionsGetRoomsAll{Rooms: rooms}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call getRoomsAll")
			return
		}
		logger.Info().Func(logHandle).Msg("call getRoomsAll")
	}(time.Now())
	return m.next.GetRoomsAll(ctx, token)
}

func (m loggerDevToolsConnections) JoinRoomByID(ctx context.Context, token string, roomID uuid.UUID) (newToken string, err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsConnections").Str("method", "joinRoomByID").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestDevToolsConnectionsJoinRoomByID{
					RoomID: roomID,
					Token:  token,
				}),
				"response": viewer.Sprintf("%+v", responseDevToolsConnectionsJoinRoomByID{NewToken: newToken}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call joinRoomByID")
			return
		}
		logger.Info().Func(logHandle).Msg("call joinRoomByID")
	}(time.Now())
	return m.next.JoinRoomByID(ctx, token, roomID)
}

func (m loggerDevToolsConnections) JoinRoomByRoomCode(ctx context.Context, token string, roomCode string) (newToken string, err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsConnections").Str("method", "joinRoomByRoomCode").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestDevToolsConnectionsJoinRoomByRoomCode{
					RoomCode: roomCode,
					Token:    token,
				}),
				"response": viewer.Sprintf("%+v", responseDevToolsConnectionsJoinRoomByRoomCode{NewToken: newToken}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call joinRoomByRoomCode")
			return
		}
		logger.Info().Func(logHandle).Msg("call joinRoomByRoomCode")
	}(time.Now())
	return m.next.JoinRoomByRoomCode(ctx, token, roomCode)
}

func (m loggerDevToolsConnections) GetMyRoom(ctx context.Context, token string) (room types.Room, err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsConnections").Str("method", "getMyRoom").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request":  viewer.Sprintf("%+v", requestDevToolsConnectionsGetMyRoom{Token: token}),
				"response": viewer.Sprintf("%+v", responseDevToolsConnectionsGetMyRoom{Room: room}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call getMyRoom")
			return
		}
		logger.Info().Func(logHandle).Msg("call getMyRoom")
	}(time.Now())
	return m.next.GetMyRoom(ctx, token)
}

func (m loggerDevToolsConnections) LeaveRoom(ctx context.Context, token string, roomID uuid.UUID) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsConnections").Str("method", "leaveRoom").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestDevToolsConnectionsLeaveRoom{
					RoomID: roomID,
					Token:  token,
				}),
				"response": viewer.Sprintf("%+v", responseDevToolsConnectionsLeaveRoom{}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call leaveRoom")
			return
		}
		logger.Info().Func(logHandle).Msg("call leaveRoom")
	}(time.Now())
	return m.next.LeaveRoom(ctx, token, roomID)
}

func (m loggerDevToolsConnections) RemoveRoomByID(ctx context.Context, token string, roomID uuid.UUID) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsConnections").Str("method", "removeRoomByID").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestDevToolsConnectionsRemoveRoomByID{
					RoomID: roomID,
					Token:  token,
				}),
				"response": viewer.Sprintf("%+v", responseDevToolsConnectionsRemoveRoomByID{}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call removeRoomByID")
			return
		}
		logger.Info().Func(logHandle).Msg("call removeRoomByID")
	}(time.Now())
	return m.next.RemoveRoomByID(ctx, token, roomID)
}

func (m loggerDevToolsConnections) GetRoomsConnectionUrls(ctx context.Context, token string) (connectionsServer []types.ConnectionServer, err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsConnections").Str("method", "getRoomsConnectionUrls").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request":  viewer.Sprintf("%+v", requestDevToolsConnectionsGetRoomsConnectionUrls{Token: token}),
				"response": viewer.Sprintf("%+v", responseDevToolsConnectionsGetRoomsConnectionUrls{ConnectionsServer: connectionsServer}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call getRoomsConnectionUrls")
			return
		}
		logger.Info().Func(logHandle).Msg("call getRoomsConnectionUrls")
	}(time.Now())
	return m.next.GetRoomsConnectionUrls(ctx, token)
}
