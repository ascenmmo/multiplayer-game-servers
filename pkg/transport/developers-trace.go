// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/opentracing/opentracing-go"
)

type traceDevelopers struct {
	next multiplayer.Developers
}

func traceMiddlewareDevelopers(next multiplayer.Developers) multiplayer.Developers {
	return &traceDevelopers{next: next}
}

func (svc traceDevelopers) SignUp(ctx context.Context, developer types.Developer) (token string, refresh string, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "SignUp")
	return svc.next.SignUp(ctx, developer)
}

func (svc traceDevelopers) SignIn(ctx context.Context, developer types.Developer) (token string, refresh string, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "SignIn")
	return svc.next.SignIn(ctx, developer)
}

func (svc traceDevelopers) RefreshToken(ctx context.Context, token string, refresh string) (newToken string, newRefresh string, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "RefreshToken")
	return svc.next.RefreshToken(ctx, token, refresh)
}

func (svc traceDevelopers) GetDeveloper(ctx context.Context, token string) (developer types.Developer, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "GetDeveloper")
	return svc.next.GetDeveloper(ctx, token)
}

func (svc traceDevelopers) UpdateDeveloper(ctx context.Context, token string, developer types.Developer) (err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "UpdateDeveloper")
	return svc.next.UpdateDeveloper(ctx, token, developer)
}
