// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/google/uuid"
)

type serverDevTools struct {
	svc                 multiplayer.DevTools
	createGame          DevToolsCreateGame
	gameAddOwner        DevToolsGameAddOwner
	gameRemoveOwner     DevToolsGameRemoveOwner
	updateGame          DevToolsUpdateGame
	deleteGame          DevToolsDeleteGame
	getMyGames          DevToolsGetMyGames
	getGameByGameID     DevToolsGetGameByGameID
	turnOnServerInGame  DevToolsTurnOnServerInGame
	turnOffServerInGame DevToolsTurnOffServerInGame
}

type MiddlewareSetDevTools interface {
	Wrap(m MiddlewareDevTools)
	WrapCreateGame(m MiddlewareDevToolsCreateGame)
	WrapGameAddOwner(m MiddlewareDevToolsGameAddOwner)
	WrapGameRemoveOwner(m MiddlewareDevToolsGameRemoveOwner)
	WrapUpdateGame(m MiddlewareDevToolsUpdateGame)
	WrapDeleteGame(m MiddlewareDevToolsDeleteGame)
	WrapGetMyGames(m MiddlewareDevToolsGetMyGames)
	WrapGetGameByGameID(m MiddlewareDevToolsGetGameByGameID)
	WrapTurnOnServerInGame(m MiddlewareDevToolsTurnOnServerInGame)
	WrapTurnOffServerInGame(m MiddlewareDevToolsTurnOffServerInGame)

	WithTrace()
	WithMetrics()
	WithLog()
}

func newServerDevTools(svc multiplayer.DevTools) *serverDevTools {
	return &serverDevTools{
		createGame:          svc.CreateGame,
		deleteGame:          svc.DeleteGame,
		gameAddOwner:        svc.GameAddOwner,
		gameRemoveOwner:     svc.GameRemoveOwner,
		getGameByGameID:     svc.GetGameByGameID,
		getMyGames:          svc.GetMyGames,
		svc:                 svc,
		turnOffServerInGame: svc.TurnOffServerInGame,
		turnOnServerInGame:  svc.TurnOnServerInGame,
		updateGame:          svc.UpdateGame,
	}
}

func (srv *serverDevTools) Wrap(m MiddlewareDevTools) {
	srv.svc = m(srv.svc)
	srv.createGame = srv.svc.CreateGame
	srv.gameAddOwner = srv.svc.GameAddOwner
	srv.gameRemoveOwner = srv.svc.GameRemoveOwner
	srv.updateGame = srv.svc.UpdateGame
	srv.deleteGame = srv.svc.DeleteGame
	srv.getMyGames = srv.svc.GetMyGames
	srv.getGameByGameID = srv.svc.GetGameByGameID
	srv.turnOnServerInGame = srv.svc.TurnOnServerInGame
	srv.turnOffServerInGame = srv.svc.TurnOffServerInGame
}

func (srv *serverDevTools) CreateGame(ctx context.Context, token string, game types.Game) (id uuid.UUID, err error) {
	return srv.createGame(ctx, token, game)
}

func (srv *serverDevTools) GameAddOwner(ctx context.Context, token string, gameID uuid.UUID, userID uuid.UUID) (err error) {
	return srv.gameAddOwner(ctx, token, gameID, userID)
}

func (srv *serverDevTools) GameRemoveOwner(ctx context.Context, token string, gameID uuid.UUID, userID uuid.UUID) (err error) {
	return srv.gameRemoveOwner(ctx, token, gameID, userID)
}

func (srv *serverDevTools) UpdateGame(ctx context.Context, token string, gameID uuid.UUID, newGame types.Game) (id uuid.UUID, err error) {
	return srv.updateGame(ctx, token, gameID, newGame)
}

func (srv *serverDevTools) DeleteGame(ctx context.Context, token string, gameID uuid.UUID) (err error) {
	return srv.deleteGame(ctx, token, gameID)
}

func (srv *serverDevTools) GetMyGames(ctx context.Context, token string) (games []types.Game, err error) {
	return srv.getMyGames(ctx, token)
}

func (srv *serverDevTools) GetGameByGameID(ctx context.Context, token string, gameID uuid.UUID) (game types.Game, err error) {
	return srv.getGameByGameID(ctx, token, gameID)
}

func (srv *serverDevTools) TurnOnServerInGame(ctx context.Context, token string, serverID uuid.UUID, gameId uuid.UUID) (err error) {
	return srv.turnOnServerInGame(ctx, token, serverID, gameId)
}

func (srv *serverDevTools) TurnOffServerInGame(ctx context.Context, token string, serverID uuid.UUID, gameId uuid.UUID) (err error) {
	return srv.turnOffServerInGame(ctx, token, serverID, gameId)
}

func (srv *serverDevTools) WrapCreateGame(m MiddlewareDevToolsCreateGame) {
	srv.createGame = m(srv.createGame)
}

func (srv *serverDevTools) WrapGameAddOwner(m MiddlewareDevToolsGameAddOwner) {
	srv.gameAddOwner = m(srv.gameAddOwner)
}

func (srv *serverDevTools) WrapGameRemoveOwner(m MiddlewareDevToolsGameRemoveOwner) {
	srv.gameRemoveOwner = m(srv.gameRemoveOwner)
}

func (srv *serverDevTools) WrapUpdateGame(m MiddlewareDevToolsUpdateGame) {
	srv.updateGame = m(srv.updateGame)
}

func (srv *serverDevTools) WrapDeleteGame(m MiddlewareDevToolsDeleteGame) {
	srv.deleteGame = m(srv.deleteGame)
}

func (srv *serverDevTools) WrapGetMyGames(m MiddlewareDevToolsGetMyGames) {
	srv.getMyGames = m(srv.getMyGames)
}

func (srv *serverDevTools) WrapGetGameByGameID(m MiddlewareDevToolsGetGameByGameID) {
	srv.getGameByGameID = m(srv.getGameByGameID)
}

func (srv *serverDevTools) WrapTurnOnServerInGame(m MiddlewareDevToolsTurnOnServerInGame) {
	srv.turnOnServerInGame = m(srv.turnOnServerInGame)
}

func (srv *serverDevTools) WrapTurnOffServerInGame(m MiddlewareDevToolsTurnOffServerInGame) {
	srv.turnOffServerInGame = m(srv.turnOffServerInGame)
}

func (srv *serverDevTools) WithTrace() {
	srv.Wrap(traceMiddlewareDevTools)
}

func (srv *serverDevTools) WithMetrics() {
	srv.Wrap(metricsMiddlewareDevTools)
}

func (srv *serverDevTools) WithLog() {
	srv.Wrap(loggerMiddlewareDevTools())
}
