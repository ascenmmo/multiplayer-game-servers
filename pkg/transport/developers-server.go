// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
)

type serverDevelopers struct {
	svc             multiplayer.Developers
	signUp          DevelopersSignUp
	signIn          DevelopersSignIn
	refreshToken    DevelopersRefreshToken
	getDeveloper    DevelopersGetDeveloper
	updateDeveloper DevelopersUpdateDeveloper
}

type MiddlewareSetDevelopers interface {
	Wrap(m MiddlewareDevelopers)
	WrapSignUp(m MiddlewareDevelopersSignUp)
	WrapSignIn(m MiddlewareDevelopersSignIn)
	WrapRefreshToken(m MiddlewareDevelopersRefreshToken)
	WrapGetDeveloper(m MiddlewareDevelopersGetDeveloper)
	WrapUpdateDeveloper(m MiddlewareDevelopersUpdateDeveloper)

	WithTrace()
	WithMetrics()
	WithLog()
}

func newServerDevelopers(svc multiplayer.Developers) *serverDevelopers {
	return &serverDevelopers{
		getDeveloper:    svc.GetDeveloper,
		refreshToken:    svc.RefreshToken,
		signIn:          svc.SignIn,
		signUp:          svc.SignUp,
		svc:             svc,
		updateDeveloper: svc.UpdateDeveloper,
	}
}

func (srv *serverDevelopers) Wrap(m MiddlewareDevelopers) {
	srv.svc = m(srv.svc)
	srv.signUp = srv.svc.SignUp
	srv.signIn = srv.svc.SignIn
	srv.refreshToken = srv.svc.RefreshToken
	srv.getDeveloper = srv.svc.GetDeveloper
	srv.updateDeveloper = srv.svc.UpdateDeveloper
}

func (srv *serverDevelopers) SignUp(ctx context.Context, developer types.Developer) (token string, refresh string, err error) {
	return srv.signUp(ctx, developer)
}

func (srv *serverDevelopers) SignIn(ctx context.Context, developer types.Developer) (token string, refresh string, err error) {
	return srv.signIn(ctx, developer)
}

func (srv *serverDevelopers) RefreshToken(ctx context.Context, token string, refresh string) (newToken string, newRefresh string, err error) {
	return srv.refreshToken(ctx, token, refresh)
}

func (srv *serverDevelopers) GetDeveloper(ctx context.Context, token string) (developer types.Developer, err error) {
	return srv.getDeveloper(ctx, token)
}

func (srv *serverDevelopers) UpdateDeveloper(ctx context.Context, token string, developer types.Developer) (err error) {
	return srv.updateDeveloper(ctx, token, developer)
}

func (srv *serverDevelopers) WrapSignUp(m MiddlewareDevelopersSignUp) {
	srv.signUp = m(srv.signUp)
}

func (srv *serverDevelopers) WrapSignIn(m MiddlewareDevelopersSignIn) {
	srv.signIn = m(srv.signIn)
}

func (srv *serverDevelopers) WrapRefreshToken(m MiddlewareDevelopersRefreshToken) {
	srv.refreshToken = m(srv.refreshToken)
}

func (srv *serverDevelopers) WrapGetDeveloper(m MiddlewareDevelopersGetDeveloper) {
	srv.getDeveloper = m(srv.getDeveloper)
}

func (srv *serverDevelopers) WrapUpdateDeveloper(m MiddlewareDevelopersUpdateDeveloper) {
	srv.updateDeveloper = m(srv.updateDeveloper)
}

func (srv *serverDevelopers) WithTrace() {
	srv.Wrap(traceMiddlewareDevelopers)
}

func (srv *serverDevelopers) WithMetrics() {
	srv.Wrap(metricsMiddlewareDevelopers)
}

func (srv *serverDevelopers) WithLog() {
	srv.Wrap(loggerMiddlewareDevelopers())
}
