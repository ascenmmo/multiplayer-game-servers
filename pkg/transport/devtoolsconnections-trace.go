// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/google/uuid"
	"github.com/opentracing/opentracing-go"
)

type traceDevToolsConnections struct {
	next multiplayer.DevToolsConnections
}

func traceMiddlewareDevToolsConnections(next multiplayer.DevToolsConnections) multiplayer.DevToolsConnections {
	return &traceDevToolsConnections{next: next}
}

func (svc traceDevToolsConnections) CreateRoom(ctx context.Context, token string, gameID uuid.UUID, serverType string) (newToken string, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "CreateRoom")
	return svc.next.CreateRoom(ctx, token, gameID, serverType)
}

func (svc traceDevToolsConnections) GetRoomsAll(ctx context.Context, token string, gameID uuid.UUID) (rooms []types.Room, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "GetRoomsAll")
	return svc.next.GetRoomsAll(ctx, token, gameID)
}

func (svc traceDevToolsConnections) JoinRoomByID(ctx context.Context, token string, gameID uuid.UUID, roomID uuid.UUID) (newToken string, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "JoinRoomByID")
	return svc.next.JoinRoomByID(ctx, token, gameID, roomID)
}

func (svc traceDevToolsConnections) RemoveRoomByID(ctx context.Context, token string, gameID uuid.UUID, roomID uuid.UUID) (err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "RemoveRoomByID")
	return svc.next.RemoveRoomByID(ctx, token, gameID, roomID)
}

func (svc traceDevToolsConnections) GetRoomsConnectionUrls(ctx context.Context, token string) (connectionsServer []types.ConnectionServer, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "GetRoomsConnectionUrls")
	return svc.next.GetRoomsConnectionUrls(ctx, token)
}
