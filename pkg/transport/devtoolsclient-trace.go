// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/google/uuid"
	"github.com/opentracing/opentracing-go"
)

type traceDevToolsClient struct {
	next multiplayer.DevToolsClient
}

func traceMiddlewareDevToolsClient(next multiplayer.DevToolsClient) multiplayer.DevToolsClient {
	return &traceDevToolsClient{next: next}
}

func (svc traceDevToolsClient) SignUp(ctx context.Context, client types.Client) (token string, refresh string, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "SignUp")
	return svc.next.SignUp(ctx, client)
}

func (svc traceDevToolsClient) SignIn(ctx context.Context, client types.Client) (token string, refresh string, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "SignIn")
	return svc.next.SignIn(ctx, client)
}

func (svc traceDevToolsClient) RefreshToken(ctx context.Context, token string, refresh string) (newToken string, newRefresh string, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "RefreshToken")
	return svc.next.RefreshToken(ctx, token, refresh)
}

func (svc traceDevToolsClient) GetClient(ctx context.Context, token string, gameID uuid.UUID) (client types.Client, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "GetClient")
	return svc.next.GetClient(ctx, token, gameID)
}

func (svc traceDevToolsClient) UpdateClient(ctx context.Context, token string, client types.Client) (err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "UpdateClient")
	return svc.next.UpdateClient(ctx, token, client)
}
