// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/google/uuid"
)

type serverDevToolsGameConfigs struct {
	svc                        multiplayer.DevToolsGameConfigs
	createOrUpdateConfig       DevToolsGameConfigsCreateOrUpdateConfig
	getGameConfig              DevToolsGameConfigsGetGameConfig
	getGameResultConfigPreview DevToolsGameConfigsGetGameResultConfigPreview
}

type MiddlewareSetDevToolsGameConfigs interface {
	Wrap(m MiddlewareDevToolsGameConfigs)
	WrapCreateOrUpdateConfig(m MiddlewareDevToolsGameConfigsCreateOrUpdateConfig)
	WrapGetGameConfig(m MiddlewareDevToolsGameConfigsGetGameConfig)
	WrapGetGameResultConfigPreview(m MiddlewareDevToolsGameConfigsGetGameResultConfigPreview)

	WithTrace()
	WithMetrics()
	WithLog()
}

func newServerDevToolsGameConfigs(svc multiplayer.DevToolsGameConfigs) *serverDevToolsGameConfigs {
	return &serverDevToolsGameConfigs{
		createOrUpdateConfig:       svc.CreateOrUpdateConfig,
		getGameConfig:              svc.GetGameConfig,
		getGameResultConfigPreview: svc.GetGameResultConfigPreview,
		svc:                        svc,
	}
}

func (srv *serverDevToolsGameConfigs) Wrap(m MiddlewareDevToolsGameConfigs) {
	srv.svc = m(srv.svc)
	srv.createOrUpdateConfig = srv.svc.CreateOrUpdateConfig
	srv.getGameConfig = srv.svc.GetGameConfig
	srv.getGameResultConfigPreview = srv.svc.GetGameResultConfigPreview
}

func (srv *serverDevToolsGameConfigs) CreateOrUpdateConfig(ctx context.Context, token string, configs types.GameConfigs) (err error) {
	return srv.createOrUpdateConfig(ctx, token, configs)
}

func (srv *serverDevToolsGameConfigs) GetGameConfig(ctx context.Context, token string, gameID uuid.UUID) (configs types.GameConfigs, err error) {
	return srv.getGameConfig(ctx, token, gameID)
}

func (srv *serverDevToolsGameConfigs) GetGameResultConfigPreview(ctx context.Context, token string, gameID uuid.UUID) (gameResult types.GameConfigResults, err error) {
	return srv.getGameResultConfigPreview(ctx, token, gameID)
}

func (srv *serverDevToolsGameConfigs) WrapCreateOrUpdateConfig(m MiddlewareDevToolsGameConfigsCreateOrUpdateConfig) {
	srv.createOrUpdateConfig = m(srv.createOrUpdateConfig)
}

func (srv *serverDevToolsGameConfigs) WrapGetGameConfig(m MiddlewareDevToolsGameConfigsGetGameConfig) {
	srv.getGameConfig = m(srv.getGameConfig)
}

func (srv *serverDevToolsGameConfigs) WrapGetGameResultConfigPreview(m MiddlewareDevToolsGameConfigsGetGameResultConfigPreview) {
	srv.getGameResultConfigPreview = m(srv.getGameResultConfigPreview)
}

func (srv *serverDevToolsGameConfigs) WithTrace() {
	srv.Wrap(traceMiddlewareDevToolsGameConfigs)
}

func (srv *serverDevToolsGameConfigs) WithMetrics() {
	srv.Wrap(metricsMiddlewareDevToolsGameConfigs)
}

func (srv *serverDevToolsGameConfigs) WithLog() {
	srv.Wrap(loggerMiddlewareDevToolsGameConfigs())
}
