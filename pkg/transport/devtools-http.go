// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/gofiber/fiber/v2"
)

type httpDevTools struct {
	errorHandler     ErrorHandler
	maxBatchSize     int
	maxParallelBatch int
	svc              *serverDevTools
	base             multiplayer.DevTools
}

func NewDevTools(svcDevTools multiplayer.DevTools) (srv *httpDevTools) {

	srv = &httpDevTools{
		base: svcDevTools,
		svc:  newServerDevTools(svcDevTools),
	}
	return
}

func (http *httpDevTools) Service() *serverDevTools {
	return http.svc
}

func (http *httpDevTools) WithLog() *httpDevTools {
	http.svc.WithLog()
	return http
}

func (http *httpDevTools) WithTrace() *httpDevTools {
	http.svc.WithTrace()
	return http
}

func (http *httpDevTools) WithMetrics() *httpDevTools {
	http.svc.WithMetrics()
	return http
}

func (http *httpDevTools) WithErrorHandler(handler ErrorHandler) *httpDevTools {
	http.errorHandler = handler
	return http
}

func (http *httpDevTools) SetRoutes(route *fiber.App) {
	route.Post("/api/v1/devTools", http.serveBatch)
	route.Post("/api/v1/devTools/createGame", http.serveCreateGame)
	route.Post("/api/v1/devTools/gameAddOwner", http.serveGameAddOwner)
	route.Post("/api/v1/devTools/gameRemoveOwner", http.serveGameRemoveOwner)
	route.Post("/api/v1/devTools/updateGame", http.serveUpdateGame)
	route.Post("/api/v1/devTools/deleteGame", http.serveDeleteGame)
	route.Post("/api/v1/devTools/getMyGames", http.serveGetMyGames)
	route.Post("/api/v1/devTools/getGameByGameID", http.serveGetGameByGameID)
	route.Post("/api/v1/devTools/turnOnServerInGame", http.serveTurnOnServerInGame)
	route.Post("/api/v1/devTools/turnOffServerInGame", http.serveTurnOffServerInGame)
}
