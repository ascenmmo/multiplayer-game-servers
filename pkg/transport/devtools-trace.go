// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/google/uuid"
	"github.com/opentracing/opentracing-go"
)

type traceDevTools struct {
	next multiplayer.DevTools
}

func traceMiddlewareDevTools(next multiplayer.DevTools) multiplayer.DevTools {
	return &traceDevTools{next: next}
}

func (svc traceDevTools) CreateGame(ctx context.Context, token string, game types.Game) (id uuid.UUID, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "CreateGame")
	return svc.next.CreateGame(ctx, token, game)
}

func (svc traceDevTools) GameAddOwner(ctx context.Context, token string, gameID uuid.UUID, userID uuid.UUID) (err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "GameAddOwner")
	return svc.next.GameAddOwner(ctx, token, gameID, userID)
}

func (svc traceDevTools) GameRemoveUser(ctx context.Context, token string, gameID uuid.UUID, userID uuid.UUID) (err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "GameRemoveUser")
	return svc.next.GameRemoveUser(ctx, token, gameID, userID)
}

func (svc traceDevTools) UpdateGame(ctx context.Context, token string, gameID uuid.UUID, newGame types.Game) (id uuid.UUID, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "UpdateGame")
	return svc.next.UpdateGame(ctx, token, gameID, newGame)
}

func (svc traceDevTools) GetMyGames(ctx context.Context, token string) (games []types.Game, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "GetMyGames")
	return svc.next.GetMyGames(ctx, token)
}

func (svc traceDevTools) GetGameByGameID(ctx context.Context, token string, gameID uuid.UUID) (game types.Game, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "GetGameByGameID")
	return svc.next.GetGameByGameID(ctx, token, gameID)
}

func (svc traceDevTools) TurnOnServerInGame(ctx context.Context, token string, serverID uuid.UUID, gameId uuid.UUID) (err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "TurnOnServerInGame")
	return svc.next.TurnOnServerInGame(ctx, token, serverID, gameId)
}

func (svc traceDevTools) TurnOffServerInGame(ctx context.Context, token string, serverID uuid.UUID, gameId uuid.UUID) (err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "TurnOffServerInGame")
	return svc.next.TurnOffServerInGame(ctx, token, serverID, gameId)
}
