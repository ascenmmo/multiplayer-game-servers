// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"strconv"
	"time"

	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/google/uuid"
)

type metricsDevToolsServer struct {
	next multiplayer.DevToolsServer
}

func metricsMiddlewareDevToolsServer(next multiplayer.DevToolsServer) multiplayer.DevToolsServer {
	return &metricsDevToolsServer{next: next}
}

func (m metricsDevToolsServer) AddServer(ctx context.Context, token string, name string, address string) (err error) {

	defer func(_begin time.Time) {
		var (
			success = true
			errCode int
		)
		if err != nil {
			success = false
			errCode = internalError
			ec, ok := err.(withErrorCode)
			if ok {
				errCode = ec.Code()
			}
		}
		RequestCount.WithLabelValues("devToolsServer", "addServer", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestCountAll.WithLabelValues("devToolsServer", "addServer", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestLatency.WithLabelValues("devToolsServer", "addServer", strconv.FormatBool(success), strconv.Itoa(errCode)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	return m.next.AddServer(ctx, token, name, address)
}

func (m metricsDevToolsServer) GetServers(ctx context.Context, token string) (servers []types.Server, err error) {

	defer func(_begin time.Time) {
		var (
			success = true
			errCode int
		)
		if err != nil {
			success = false
			errCode = internalError
			ec, ok := err.(withErrorCode)
			if ok {
				errCode = ec.Code()
			}
		}
		RequestCount.WithLabelValues("devToolsServer", "getServers", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestCountAll.WithLabelValues("devToolsServer", "getServers", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestLatency.WithLabelValues("devToolsServer", "getServers", strconv.FormatBool(success), strconv.Itoa(errCode)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	return m.next.GetServers(ctx, token)
}

func (m metricsDevToolsServer) DeleteServers(ctx context.Context, token string, serverID uuid.UUID) (err error) {

	defer func(_begin time.Time) {
		var (
			success = true
			errCode int
		)
		if err != nil {
			success = false
			errCode = internalError
			ec, ok := err.(withErrorCode)
			if ok {
				errCode = ec.Code()
			}
		}
		RequestCount.WithLabelValues("devToolsServer", "deleteServers", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestCountAll.WithLabelValues("devToolsServer", "deleteServers", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestLatency.WithLabelValues("devToolsServer", "deleteServers", strconv.FormatBool(success), strconv.Itoa(errCode)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	return m.next.DeleteServers(ctx, token, serverID)
}
