// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"fmt"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/go-kit/kit/metrics"
	"github.com/google/uuid"
	"time"
)

type metricsDevToolsGameConfigs struct {
	next            multiplayer.DevToolsGameConfigs
	requestCount    metrics.Counter
	requestCountAll metrics.Counter
	requestLatency  metrics.Histogram
}

func metricsMiddlewareDevToolsGameConfigs(next multiplayer.DevToolsGameConfigs) multiplayer.DevToolsGameConfigs {
	return &metricsDevToolsGameConfigs{
		next:            next,
		requestCount:    RequestCount.With("service", "DevToolsGameConfigs"),
		requestCountAll: RequestCountAll.With("service", "DevToolsGameConfigs"),
		requestLatency:  RequestLatency.With("service", "DevToolsGameConfigs"),
	}
}

func (m metricsDevToolsGameConfigs) CreateOrUpdateConfig(ctx context.Context, token string, configs types.GameConfigs) (err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "createOrUpdateConfig", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "createOrUpdateConfig", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "createOrUpdateConfig").Add(1)

	return m.next.CreateOrUpdateConfig(ctx, token, configs)
}

func (m metricsDevToolsGameConfigs) GetGameConfig(ctx context.Context, token string, gameID uuid.UUID) (configs types.GameConfigs, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "getGameConfig", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "getGameConfig", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "getGameConfig").Add(1)

	return m.next.GetGameConfig(ctx, token, gameID)
}
