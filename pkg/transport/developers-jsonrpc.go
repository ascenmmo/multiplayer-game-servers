// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"encoding/json"
	"github.com/gofiber/fiber/v2"
	otg "github.com/opentracing/opentracing-go"
	"github.com/opentracing/opentracing-go/ext"
	"strings"
	"sync"
)

func (http *httpDevelopers) serveSignUp(ctx *fiber.Ctx) (err error) {
	return http.serveMethod(ctx, "signup", http.signUp)
}
func (http *httpDevelopers) signUp(ctx *fiber.Ctx, requestBase baseJsonRPC) (responseBase *baseJsonRPC) {

	var err error
	var request requestDevelopersSignUp

	methodCtx := ctx.UserContext()
	span := otg.SpanFromContext(methodCtx)
	span.SetTag("method", "signUp")

	if requestBase.Params != nil {
		if err = json.Unmarshal(requestBase.Params, &request); err != nil {
			ext.Error.Set(span, true)
			span.SetTag("msg", "request body could not be decoded: "+err.Error())
			return makeErrorResponseJsonRPC(requestBase.ID, parseError, "request body could not be decoded: "+err.Error(), nil)
		}
	}
	if requestBase.Version != Version {
		ext.Error.Set(span, true)
		span.SetTag("msg", "incorrect protocol version: "+requestBase.Version)
		return makeErrorResponseJsonRPC(requestBase.ID, parseError, "incorrect protocol version: "+requestBase.Version, nil)
	}

	var response responseDevelopersSignUp
	response.Token, response.Refresh, err = http.svc.SignUp(methodCtx, request.Developer)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
		ext.Error.Set(span, true)
		span.SetTag("msg", err)
		span.SetTag("errData", toString(err))
		code := internalError
		if errCoder, ok := err.(withErrorCode); ok {
			code = errCoder.Code()
		}
		return makeErrorResponseJsonRPC(requestBase.ID, code, err.Error(), err)
	}
	responseBase = &baseJsonRPC{
		ID:      requestBase.ID,
		Version: Version,
	}
	if responseBase.Result, err = json.Marshal(response); err != nil {
		ext.Error.Set(span, true)
		span.SetTag("msg", "response body could not be encoded: "+err.Error())
		return makeErrorResponseJsonRPC(requestBase.ID, parseError, "response body could not be encoded: "+err.Error(), nil)
	}
	return
}
func (http *httpDevelopers) serveSignIn(ctx *fiber.Ctx) (err error) {
	return http.serveMethod(ctx, "signin", http.signIn)
}
func (http *httpDevelopers) signIn(ctx *fiber.Ctx, requestBase baseJsonRPC) (responseBase *baseJsonRPC) {

	var err error
	var request requestDevelopersSignIn

	methodCtx := ctx.UserContext()
	span := otg.SpanFromContext(methodCtx)
	span.SetTag("method", "signIn")

	if requestBase.Params != nil {
		if err = json.Unmarshal(requestBase.Params, &request); err != nil {
			ext.Error.Set(span, true)
			span.SetTag("msg", "request body could not be decoded: "+err.Error())
			return makeErrorResponseJsonRPC(requestBase.ID, parseError, "request body could not be decoded: "+err.Error(), nil)
		}
	}
	if requestBase.Version != Version {
		ext.Error.Set(span, true)
		span.SetTag("msg", "incorrect protocol version: "+requestBase.Version)
		return makeErrorResponseJsonRPC(requestBase.ID, parseError, "incorrect protocol version: "+requestBase.Version, nil)
	}

	var response responseDevelopersSignIn
	response.Token, response.Refresh, err = http.svc.SignIn(methodCtx, request.Developer)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
		ext.Error.Set(span, true)
		span.SetTag("msg", err)
		span.SetTag("errData", toString(err))
		code := internalError
		if errCoder, ok := err.(withErrorCode); ok {
			code = errCoder.Code()
		}
		return makeErrorResponseJsonRPC(requestBase.ID, code, err.Error(), err)
	}
	responseBase = &baseJsonRPC{
		ID:      requestBase.ID,
		Version: Version,
	}
	if responseBase.Result, err = json.Marshal(response); err != nil {
		ext.Error.Set(span, true)
		span.SetTag("msg", "response body could not be encoded: "+err.Error())
		return makeErrorResponseJsonRPC(requestBase.ID, parseError, "response body could not be encoded: "+err.Error(), nil)
	}
	return
}
func (http *httpDevelopers) serveRefreshToken(ctx *fiber.Ctx) (err error) {
	return http.serveMethod(ctx, "refreshtoken", http.refreshToken)
}
func (http *httpDevelopers) refreshToken(ctx *fiber.Ctx, requestBase baseJsonRPC) (responseBase *baseJsonRPC) {

	var err error
	var request requestDevelopersRefreshToken

	methodCtx := ctx.UserContext()
	span := otg.SpanFromContext(methodCtx)
	span.SetTag("method", "refreshToken")

	if requestBase.Params != nil {
		if err = json.Unmarshal(requestBase.Params, &request); err != nil {
			ext.Error.Set(span, true)
			span.SetTag("msg", "request body could not be decoded: "+err.Error())
			return makeErrorResponseJsonRPC(requestBase.ID, parseError, "request body could not be decoded: "+err.Error(), nil)
		}
	}
	if requestBase.Version != Version {
		ext.Error.Set(span, true)
		span.SetTag("msg", "incorrect protocol version: "+requestBase.Version)
		return makeErrorResponseJsonRPC(requestBase.ID, parseError, "incorrect protocol version: "+requestBase.Version, nil)
	}

	if _token := string(ctx.Request().Header.Peek("Token")); _token != "" {
		var token string
		token = _token
		request.Token = token
	}
	if _refresh := string(ctx.Request().Header.Peek("RefreshToken")); _refresh != "" {
		var refresh string
		refresh = _refresh
		request.Refresh = refresh
	}

	var response responseDevelopersRefreshToken
	response.NewToken, response.NewRefresh, err = http.svc.RefreshToken(methodCtx, request.Token, request.Refresh)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
		ext.Error.Set(span, true)
		span.SetTag("msg", err)
		span.SetTag("errData", toString(err))
		code := internalError
		if errCoder, ok := err.(withErrorCode); ok {
			code = errCoder.Code()
		}
		return makeErrorResponseJsonRPC(requestBase.ID, code, err.Error(), err)
	}
	responseBase = &baseJsonRPC{
		ID:      requestBase.ID,
		Version: Version,
	}
	if responseBase.Result, err = json.Marshal(response); err != nil {
		ext.Error.Set(span, true)
		span.SetTag("msg", "response body could not be encoded: "+err.Error())
		return makeErrorResponseJsonRPC(requestBase.ID, parseError, "response body could not be encoded: "+err.Error(), nil)
	}
	return
}
func (http *httpDevelopers) serveGetDeveloper(ctx *fiber.Ctx) (err error) {
	return http.serveMethod(ctx, "getdeveloper", http.getDeveloper)
}
func (http *httpDevelopers) getDeveloper(ctx *fiber.Ctx, requestBase baseJsonRPC) (responseBase *baseJsonRPC) {

	var err error
	var request requestDevelopersGetDeveloper

	methodCtx := ctx.UserContext()
	span := otg.SpanFromContext(methodCtx)
	span.SetTag("method", "getDeveloper")

	if requestBase.Params != nil {
		if err = json.Unmarshal(requestBase.Params, &request); err != nil {
			ext.Error.Set(span, true)
			span.SetTag("msg", "request body could not be decoded: "+err.Error())
			return makeErrorResponseJsonRPC(requestBase.ID, parseError, "request body could not be decoded: "+err.Error(), nil)
		}
	}
	if requestBase.Version != Version {
		ext.Error.Set(span, true)
		span.SetTag("msg", "incorrect protocol version: "+requestBase.Version)
		return makeErrorResponseJsonRPC(requestBase.ID, parseError, "incorrect protocol version: "+requestBase.Version, nil)
	}

	if _token := string(ctx.Request().Header.Peek("Token")); _token != "" {
		var token string
		token = _token
		request.Token = token
	}

	var response responseDevelopersGetDeveloper
	response.Developer, err = http.svc.GetDeveloper(methodCtx, request.Token)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
		ext.Error.Set(span, true)
		span.SetTag("msg", err)
		span.SetTag("errData", toString(err))
		code := internalError
		if errCoder, ok := err.(withErrorCode); ok {
			code = errCoder.Code()
		}
		return makeErrorResponseJsonRPC(requestBase.ID, code, err.Error(), err)
	}
	responseBase = &baseJsonRPC{
		ID:      requestBase.ID,
		Version: Version,
	}
	if responseBase.Result, err = json.Marshal(response); err != nil {
		ext.Error.Set(span, true)
		span.SetTag("msg", "response body could not be encoded: "+err.Error())
		return makeErrorResponseJsonRPC(requestBase.ID, parseError, "response body could not be encoded: "+err.Error(), nil)
	}
	return
}
func (http *httpDevelopers) serveUpdateDeveloper(ctx *fiber.Ctx) (err error) {
	return http.serveMethod(ctx, "updatedeveloper", http.updateDeveloper)
}
func (http *httpDevelopers) updateDeveloper(ctx *fiber.Ctx, requestBase baseJsonRPC) (responseBase *baseJsonRPC) {

	var err error
	var request requestDevelopersUpdateDeveloper

	methodCtx := ctx.UserContext()
	span := otg.SpanFromContext(methodCtx)
	span.SetTag("method", "updateDeveloper")

	if requestBase.Params != nil {
		if err = json.Unmarshal(requestBase.Params, &request); err != nil {
			ext.Error.Set(span, true)
			span.SetTag("msg", "request body could not be decoded: "+err.Error())
			return makeErrorResponseJsonRPC(requestBase.ID, parseError, "request body could not be decoded: "+err.Error(), nil)
		}
	}
	if requestBase.Version != Version {
		ext.Error.Set(span, true)
		span.SetTag("msg", "incorrect protocol version: "+requestBase.Version)
		return makeErrorResponseJsonRPC(requestBase.ID, parseError, "incorrect protocol version: "+requestBase.Version, nil)
	}

	if _token := string(ctx.Request().Header.Peek("Token")); _token != "" {
		var token string
		token = _token
		request.Token = token
	}

	var response responseDevelopersUpdateDeveloper
	err = http.svc.UpdateDeveloper(methodCtx, request.Token, request.Developer)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
		ext.Error.Set(span, true)
		span.SetTag("msg", err)
		span.SetTag("errData", toString(err))
		code := internalError
		if errCoder, ok := err.(withErrorCode); ok {
			code = errCoder.Code()
		}
		return makeErrorResponseJsonRPC(requestBase.ID, code, err.Error(), err)
	}
	responseBase = &baseJsonRPC{
		ID:      requestBase.ID,
		Version: Version,
	}
	if responseBase.Result, err = json.Marshal(response); err != nil {
		ext.Error.Set(span, true)
		span.SetTag("msg", "response body could not be encoded: "+err.Error())
		return makeErrorResponseJsonRPC(requestBase.ID, parseError, "response body could not be encoded: "+err.Error(), nil)
	}
	return
}
func (http *httpDevelopers) serveMethod(ctx *fiber.Ctx, methodName string, methodHandler methodJsonRPC) (err error) {

	span := otg.SpanFromContext(ctx.UserContext())
	span.SetTag("method", methodName)

	methodHTTP := ctx.Method()
	if methodHTTP != fiber.MethodPost {
		ext.Error.Set(span, true)
		span.SetTag("msg", "only POST method supported")
		ctx.Response().SetStatusCode(fiber.StatusMethodNotAllowed)
		if _, err = ctx.WriteString("only POST method supported"); err != nil {
			return
		}
	}
	var request baseJsonRPC
	var response *baseJsonRPC
	if err = json.Unmarshal(ctx.Body(), &request); err != nil {
		ext.Error.Set(span, true)
		span.SetTag("msg", "request body could not be decoded: "+err.Error())
		return sendResponse(ctx, makeErrorResponseJsonRPC([]byte("\"0\""), parseError, "request body could not be decoded: "+err.Error(), nil))
	}
	methodNameOrigin := request.Method
	method := strings.ToLower(request.Method)
	if method != "" && method != methodName {
		ext.Error.Set(span, true)
		span.SetTag("msg", "invalid method "+methodNameOrigin)
		return sendResponse(ctx, makeErrorResponseJsonRPC(request.ID, methodNotFoundError, "invalid method "+methodNameOrigin, nil))
	}
	response = methodHandler(ctx, request)
	if response != nil {
		return sendResponse(ctx, response)
	}
	return
}
func (http *httpDevelopers) doBatch(ctx *fiber.Ctx, requests []baseJsonRPC) (responses jsonrpcResponses) {

	if len(requests) > http.maxBatchSize {
		responses.append(makeErrorResponseJsonRPC(nil, invalidRequestError, "batch size exceeded", nil))
		return
	}
	if strings.EqualFold(ctx.Get("X-Sync-On"), "true") {
		for _, request := range requests {
			response := http.doSingleBatch(ctx, request)
			if request.ID != nil {
				responses.append(response)
			}
		}
		return
	}
	var wg sync.WaitGroup
	batchSize := http.maxParallelBatch
	if len(requests) < batchSize {
		batchSize = len(requests)
	}
	callCh := make(chan baseJsonRPC, batchSize)
	responses = make(jsonrpcResponses, 0, len(requests))
	for i := 0; i < batchSize; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			for request := range callCh {
				response := http.doSingleBatch(ctx, request)
				if request.ID != nil {
					responses.append(response)
				}
			}
		}()
	}
	for idx := range requests {
		callCh <- requests[idx]
	}
	close(callCh)
	wg.Wait()
	return
}
func (http *httpDevelopers) serveBatch(ctx *fiber.Ctx) (err error) {

	var single bool
	var requests []baseJsonRPC
	batchSpan := otg.SpanFromContext(ctx.UserContext())
	methodHTTP := ctx.Method()
	if methodHTTP != fiber.MethodPost {
		ext.Error.Set(batchSpan, true)
		batchSpan.SetTag("msg", "only POST method supported")
		ctx.Response().SetStatusCode(fiber.StatusMethodNotAllowed)
		if _, err = ctx.WriteString("only POST method supported"); err != nil {
			return
		}
		return
	}
	if err = json.Unmarshal(ctx.Body(), &requests); err != nil {
		var request baseJsonRPC
		if err = json.Unmarshal(ctx.Body(), &request); err != nil {
			ext.Error.Set(batchSpan, true)
			batchSpan.SetTag("msg", "request body could not be decoded: "+err.Error())
			return sendResponse(ctx, makeErrorResponseJsonRPC([]byte("\"0\""), parseError, "request body could not be decoded: "+err.Error(), nil))
		}
		single = true
		requests = append(requests, request)
	}
	if single {
		return sendResponse(ctx, http.doSingleBatch(ctx, requests[0]))
	}
	return sendResponse(ctx, http.doBatch(ctx, requests))
}
func (http *httpDevelopers) doSingleBatch(ctx *fiber.Ctx, request baseJsonRPC) (response *baseJsonRPC) {

	methodContext := ctx.UserContext()
	methodNameOrigin := request.Method
	method := strings.ToLower(request.Method)
	batchSpan := otg.SpanFromContext(methodContext)
	span := otg.StartSpan(request.Method, otg.ChildOf(batchSpan.Context()))
	defer span.Finish()
	methodContext = otg.ContextWithSpan(ctx.UserContext(), span)
	switch method {
	case "signup":
		return http.signUp(ctx, request)
	case "signin":
		return http.signIn(ctx, request)
	case "refreshtoken":
		return http.refreshToken(ctx, request)
	case "getdeveloper":
		return http.getDeveloper(ctx, request)
	case "updatedeveloper":
		return http.updateDeveloper(ctx, request)
	default:
		ext.Error.Set(span, true)
		span.SetTag("msg", "invalid method '"+methodNameOrigin+"'")
		return makeErrorResponseJsonRPC(request.ID, methodNotFoundError, "invalid method '"+methodNameOrigin+"'", nil)
	}
}
