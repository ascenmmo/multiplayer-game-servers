// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/transport/viewer"
	"github.com/google/uuid"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"time"
)

type loggerDevToolsClient struct {
	next multiplayer.DevToolsClient
}

func loggerMiddlewareDevToolsClient() MiddlewareDevToolsClient {
	return func(next multiplayer.DevToolsClient) multiplayer.DevToolsClient {
		return &loggerDevToolsClient{next: next}
	}
}

func (m loggerDevToolsClient) SignUp(ctx context.Context, client types.Client) (token string, refresh string, err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsClient").Str("method", "signUp").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestDevToolsClientSignUp{Client: client}),
				"response": viewer.Sprintf("%+v", responseDevToolsClientSignUp{
					Refresh: refresh,
					Token:   token,
				}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call signUp")
			return
		}
		logger.Info().Func(logHandle).Msg("call signUp")
	}(time.Now())
	return m.next.SignUp(ctx, client)
}

func (m loggerDevToolsClient) SignIn(ctx context.Context, client types.Client) (token string, refresh string, err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsClient").Str("method", "signIn").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestDevToolsClientSignIn{Client: client}),
				"response": viewer.Sprintf("%+v", responseDevToolsClientSignIn{
					Refresh: refresh,
					Token:   token,
				}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call signIn")
			return
		}
		logger.Info().Func(logHandle).Msg("call signIn")
	}(time.Now())
	return m.next.SignIn(ctx, client)
}

func (m loggerDevToolsClient) RefreshToken(ctx context.Context, token string, refresh string) (newToken string, newRefresh string, err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsClient").Str("method", "refreshToken").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestDevToolsClientRefreshToken{
					Refresh: refresh,
					Token:   token,
				}),
				"response": viewer.Sprintf("%+v", responseDevToolsClientRefreshToken{
					NewRefresh: newRefresh,
					NewToken:   newToken,
				}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call refreshToken")
			return
		}
		logger.Info().Func(logHandle).Msg("call refreshToken")
	}(time.Now())
	return m.next.RefreshToken(ctx, token, refresh)
}

func (m loggerDevToolsClient) GetClient(ctx context.Context, token string, gameID uuid.UUID) (client types.Client, err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsClient").Str("method", "getClient").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestDevToolsClientGetClient{
					GameID: gameID,
					Token:  token,
				}),
				"response": viewer.Sprintf("%+v", responseDevToolsClientGetClient{Client: client}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call getClient")
			return
		}
		logger.Info().Func(logHandle).Msg("call getClient")
	}(time.Now())
	return m.next.GetClient(ctx, token, gameID)
}

func (m loggerDevToolsClient) UpdateClient(ctx context.Context, token string, client types.Client) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsClient").Str("method", "updateClient").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestDevToolsClientUpdateClient{
					Client: client,
					Token:  token,
				}),
				"response": viewer.Sprintf("%+v", responseDevToolsClientUpdateClient{}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call updateClient")
			return
		}
		logger.Info().Func(logHandle).Msg("call updateClient")
	}(time.Now())
	return m.next.UpdateClient(ctx, token, client)
}

func (m loggerDevToolsClient) GetGameSaves(ctx context.Context, token string) (gameSaves types.GameSaves, err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsClient").Str("method", "getGameSaves").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request":  viewer.Sprintf("%+v", requestDevToolsClientGetGameSaves{Token: token}),
				"response": viewer.Sprintf("%+v", responseDevToolsClientGetGameSaves{GameSaves: gameSaves}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call getGameSaves")
			return
		}
		logger.Info().Func(logHandle).Msg("call getGameSaves")
	}(time.Now())
	return m.next.GetGameSaves(ctx, token)
}

func (m loggerDevToolsClient) SetGameSaves(ctx context.Context, token string, gameSaves types.GameSaves) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsClient").Str("method", "setGameSaves").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestDevToolsClientSetGameSaves{
					GameSaves: gameSaves,
					Token:     token,
				}),
				"response": viewer.Sprintf("%+v", responseDevToolsClientSetGameSaves{}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call setGameSaves")
			return
		}
		logger.Info().Func(logHandle).Msg("call setGameSaves")
	}(time.Now())
	return m.next.SetGameSaves(ctx, token, gameSaves)
}

func (m loggerDevToolsClient) DeleteGameSaves(ctx context.Context, token string) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsClient").Str("method", "deleteGameSaves").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request":  viewer.Sprintf("%+v", requestDevToolsClientDeleteGameSaves{Token: token}),
				"response": viewer.Sprintf("%+v", responseDevToolsClientDeleteGameSaves{}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call deleteGameSaves")
			return
		}
		logger.Info().Func(logHandle).Msg("call deleteGameSaves")
	}(time.Now())
	return m.next.DeleteGameSaves(ctx, token)
}
