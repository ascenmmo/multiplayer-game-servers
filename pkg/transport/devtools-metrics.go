// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"fmt"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/go-kit/kit/metrics"
	"github.com/google/uuid"
	"time"
)

type metricsDevTools struct {
	next            multiplayer.DevTools
	requestCount    metrics.Counter
	requestCountAll metrics.Counter
	requestLatency  metrics.Histogram
}

func metricsMiddlewareDevTools(next multiplayer.DevTools) multiplayer.DevTools {
	return &metricsDevTools{
		next:            next,
		requestCount:    RequestCount.With("service", "DevTools"),
		requestCountAll: RequestCountAll.With("service", "DevTools"),
		requestLatency:  RequestLatency.With("service", "DevTools"),
	}
}

func (m metricsDevTools) CreateGame(ctx context.Context, token string, game types.Game) (id uuid.UUID, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "createGame", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "createGame", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "createGame").Add(1)

	return m.next.CreateGame(ctx, token, game)
}

func (m metricsDevTools) GameAddOwner(ctx context.Context, token string, gameID uuid.UUID, userID uuid.UUID) (err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "gameAddOwner", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "gameAddOwner", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "gameAddOwner").Add(1)

	return m.next.GameAddOwner(ctx, token, gameID, userID)
}

func (m metricsDevTools) GameRemoveUser(ctx context.Context, token string, gameID uuid.UUID, userID uuid.UUID) (err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "gameRemoveUser", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "gameRemoveUser", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "gameRemoveUser").Add(1)

	return m.next.GameRemoveUser(ctx, token, gameID, userID)
}

func (m metricsDevTools) UpdateGame(ctx context.Context, token string, gameID uuid.UUID, newGame types.Game) (id uuid.UUID, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "updateGame", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "updateGame", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "updateGame").Add(1)

	return m.next.UpdateGame(ctx, token, gameID, newGame)
}

func (m metricsDevTools) DeleteGame(ctx context.Context, token string, gameID uuid.UUID) (err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "deleteGame", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "deleteGame", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "deleteGame").Add(1)

	return m.next.DeleteGame(ctx, token, gameID)
}

func (m metricsDevTools) GetMyGames(ctx context.Context, token string) (games []types.Game, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "getMyGames", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "getMyGames", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "getMyGames").Add(1)

	return m.next.GetMyGames(ctx, token)
}

func (m metricsDevTools) GetGameByGameID(ctx context.Context, token string, gameID uuid.UUID) (game types.Game, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "getGameByGameID", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "getGameByGameID", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "getGameByGameID").Add(1)

	return m.next.GetGameByGameID(ctx, token, gameID)
}

func (m metricsDevTools) TurnOnServerInGame(ctx context.Context, token string, serverID uuid.UUID, gameId uuid.UUID) (err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "turnOnServerInGame", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "turnOnServerInGame", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "turnOnServerInGame").Add(1)

	return m.next.TurnOnServerInGame(ctx, token, serverID, gameId)
}

func (m metricsDevTools) TurnOffServerInGame(ctx context.Context, token string, serverID uuid.UUID, gameId uuid.UUID) (err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "turnOffServerInGame", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "turnOffServerInGame", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "turnOffServerInGame").Add(1)

	return m.next.TurnOffServerInGame(ctx, token, serverID, gameId)
}
