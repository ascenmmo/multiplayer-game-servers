// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"fmt"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/go-kit/kit/metrics"
	"time"
)

type metricsDevelopers struct {
	next            multiplayer.Developers
	requestCount    metrics.Counter
	requestCountAll metrics.Counter
	requestLatency  metrics.Histogram
}

func metricsMiddlewareDevelopers(next multiplayer.Developers) multiplayer.Developers {
	return &metricsDevelopers{
		next:            next,
		requestCount:    RequestCount.With("service", "Developers"),
		requestCountAll: RequestCountAll.With("service", "Developers"),
		requestLatency:  RequestLatency.With("service", "Developers"),
	}
}

func (m metricsDevelopers) SignUp(ctx context.Context, developer types.Developer) (token string, refresh string, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "signUp", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "signUp", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "signUp").Add(1)

	return m.next.SignUp(ctx, developer)
}

func (m metricsDevelopers) SignIn(ctx context.Context, developer types.Developer) (token string, refresh string, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "signIn", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "signIn", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "signIn").Add(1)

	return m.next.SignIn(ctx, developer)
}

func (m metricsDevelopers) RefreshToken(ctx context.Context, token string, refresh string) (newToken string, newRefresh string, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "refreshToken", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "refreshToken", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "refreshToken").Add(1)

	return m.next.RefreshToken(ctx, token, refresh)
}

func (m metricsDevelopers) GetDeveloper(ctx context.Context, token string) (developer types.Developer, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "getDeveloper", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "getDeveloper", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "getDeveloper").Add(1)

	return m.next.GetDeveloper(ctx, token)
}

func (m metricsDevelopers) UpdateDeveloper(ctx context.Context, token string, developer types.Developer) (err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "updateDeveloper", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "updateDeveloper", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "updateDeveloper").Add(1)

	return m.next.UpdateDeveloper(ctx, token, developer)
}
