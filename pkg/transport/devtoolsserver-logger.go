// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/transport/viewer"
	"github.com/google/uuid"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"time"
)

type loggerDevToolsServer struct {
	next multiplayer.DevToolsServer
}

func loggerMiddlewareDevToolsServer() MiddlewareDevToolsServer {
	return func(next multiplayer.DevToolsServer) multiplayer.DevToolsServer {
		return &loggerDevToolsServer{next: next}
	}
}

func (m loggerDevToolsServer) AddServer(ctx context.Context, token string, name string, address string) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsServer").Str("method", "addServer").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestDevToolsServerAddServer{
					Address: address,
					Name:    name,
					Token:   token,
				}),
				"response": viewer.Sprintf("%+v", responseDevToolsServerAddServer{}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call addServer")
			return
		}
		logger.Info().Func(logHandle).Msg("call addServer")
	}(time.Now())
	return m.next.AddServer(ctx, token, name, address)
}

func (m loggerDevToolsServer) GetServers(ctx context.Context, token string) (servers []types.Server, err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsServer").Str("method", "getServers").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request":  viewer.Sprintf("%+v", requestDevToolsServerGetServers{Token: token}),
				"response": viewer.Sprintf("%+v", responseDevToolsServerGetServers{Servers: servers}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call getServers")
			return
		}
		logger.Info().Func(logHandle).Msg("call getServers")
	}(time.Now())
	return m.next.GetServers(ctx, token)
}

func (m loggerDevToolsServer) DeleteServers(ctx context.Context, token string, serverID uuid.UUID) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "DevToolsServer").Str("method", "deleteServers").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestDevToolsServerDeleteServers{
					ServerID: serverID,
					Token:    token,
				}),
				"response": viewer.Sprintf("%+v", responseDevToolsServerDeleteServers{}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call deleteServers")
			return
		}
		logger.Info().Func(logHandle).Msg("call deleteServers")
	}(time.Now())
	return m.next.DeleteServers(ctx, token, serverID)
}
