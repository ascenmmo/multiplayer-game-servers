// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"

	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/google/uuid"
)

type serverDevToolsConnections struct {
	svc                    multiplayer.DevToolsConnections
	createRoom             DevToolsConnectionsCreateRoom
	getRoomsAll            DevToolsConnectionsGetRoomsAll
	joinRoomByID           DevToolsConnectionsJoinRoomByID
	joinRoomByRoomCode     DevToolsConnectionsJoinRoomByRoomCode
	getMyRoom              DevToolsConnectionsGetMyRoom
	leaveRoom              DevToolsConnectionsLeaveRoom
	removeRoomByID         DevToolsConnectionsRemoveRoomByID
	getRoomsConnectionUrls DevToolsConnectionsGetRoomsConnectionUrls
}

type MiddlewareSetDevToolsConnections interface {
	Wrap(m MiddlewareDevToolsConnections)
	WrapCreateRoom(m MiddlewareDevToolsConnectionsCreateRoom)
	WrapGetRoomsAll(m MiddlewareDevToolsConnectionsGetRoomsAll)
	WrapJoinRoomByID(m MiddlewareDevToolsConnectionsJoinRoomByID)
	WrapJoinRoomByRoomCode(m MiddlewareDevToolsConnectionsJoinRoomByRoomCode)
	WrapGetMyRoom(m MiddlewareDevToolsConnectionsGetMyRoom)
	WrapLeaveRoom(m MiddlewareDevToolsConnectionsLeaveRoom)
	WrapRemoveRoomByID(m MiddlewareDevToolsConnectionsRemoveRoomByID)
	WrapGetRoomsConnectionUrls(m MiddlewareDevToolsConnectionsGetRoomsConnectionUrls)

	WithTrace()
	WithMetrics()
	WithLog()
}

func newServerDevToolsConnections(svc multiplayer.DevToolsConnections) *serverDevToolsConnections {
	return &serverDevToolsConnections{
		createRoom:             svc.CreateRoom,
		getMyRoom:              svc.GetMyRoom,
		getRoomsAll:            svc.GetRoomsAll,
		getRoomsConnectionUrls: svc.GetRoomsConnectionUrls,
		joinRoomByID:           svc.JoinRoomByID,
		joinRoomByRoomCode:     svc.JoinRoomByRoomCode,
		leaveRoom:              svc.LeaveRoom,
		removeRoomByID:         svc.RemoveRoomByID,
		svc:                    svc,
	}
}

func (srv *serverDevToolsConnections) Wrap(m MiddlewareDevToolsConnections) {
	srv.svc = m(srv.svc)
	srv.createRoom = srv.svc.CreateRoom
	srv.getRoomsAll = srv.svc.GetRoomsAll
	srv.joinRoomByID = srv.svc.JoinRoomByID
	srv.joinRoomByRoomCode = srv.svc.JoinRoomByRoomCode
	srv.getMyRoom = srv.svc.GetMyRoom
	srv.leaveRoom = srv.svc.LeaveRoom
	srv.removeRoomByID = srv.svc.RemoveRoomByID
	srv.getRoomsConnectionUrls = srv.svc.GetRoomsConnectionUrls
}

func (srv *serverDevToolsConnections) CreateRoom(ctx context.Context, token string, name string) (newToken string, err error) {
	return srv.createRoom(ctx, token, name)
}

func (srv *serverDevToolsConnections) GetRoomsAll(ctx context.Context, token string) (rooms []types.Room, err error) {
	return srv.getRoomsAll(ctx, token)
}

func (srv *serverDevToolsConnections) JoinRoomByID(ctx context.Context, token string, roomID uuid.UUID) (newToken string, err error) {
	return srv.joinRoomByID(ctx, token, roomID)
}

func (srv *serverDevToolsConnections) JoinRoomByRoomCode(ctx context.Context, token string, roomCode string) (newToken string, err error) {
	return srv.joinRoomByRoomCode(ctx, token, roomCode)
}

func (srv *serverDevToolsConnections) GetMyRoom(ctx context.Context, token string) (room types.Room, err error) {
	return srv.getMyRoom(ctx, token)
}

func (srv *serverDevToolsConnections) LeaveRoom(ctx context.Context, token string, roomID uuid.UUID) (err error) {
	return srv.leaveRoom(ctx, token, roomID)
}

func (srv *serverDevToolsConnections) RemoveRoomByID(ctx context.Context, token string, roomID uuid.UUID) (err error) {
	return srv.removeRoomByID(ctx, token, roomID)
}

func (srv *serverDevToolsConnections) GetRoomsConnectionUrls(ctx context.Context, token string) (connectionsServer []types.ConnectionServer, err error) {
	return srv.getRoomsConnectionUrls(ctx, token)
}

func (srv *serverDevToolsConnections) WrapCreateRoom(m MiddlewareDevToolsConnectionsCreateRoom) {
	srv.createRoom = m(srv.createRoom)
}

func (srv *serverDevToolsConnections) WrapGetRoomsAll(m MiddlewareDevToolsConnectionsGetRoomsAll) {
	srv.getRoomsAll = m(srv.getRoomsAll)
}

func (srv *serverDevToolsConnections) WrapJoinRoomByID(m MiddlewareDevToolsConnectionsJoinRoomByID) {
	srv.joinRoomByID = m(srv.joinRoomByID)
}

func (srv *serverDevToolsConnections) WrapJoinRoomByRoomCode(m MiddlewareDevToolsConnectionsJoinRoomByRoomCode) {
	srv.joinRoomByRoomCode = m(srv.joinRoomByRoomCode)
}

func (srv *serverDevToolsConnections) WrapGetMyRoom(m MiddlewareDevToolsConnectionsGetMyRoom) {
	srv.getMyRoom = m(srv.getMyRoom)
}

func (srv *serverDevToolsConnections) WrapLeaveRoom(m MiddlewareDevToolsConnectionsLeaveRoom) {
	srv.leaveRoom = m(srv.leaveRoom)
}

func (srv *serverDevToolsConnections) WrapRemoveRoomByID(m MiddlewareDevToolsConnectionsRemoveRoomByID) {
	srv.removeRoomByID = m(srv.removeRoomByID)
}

func (srv *serverDevToolsConnections) WrapGetRoomsConnectionUrls(m MiddlewareDevToolsConnectionsGetRoomsConnectionUrls) {
	srv.getRoomsConnectionUrls = m(srv.getRoomsConnectionUrls)
}

func (srv *serverDevToolsConnections) WithTrace() {
	srv.Wrap(traceMiddlewareDevToolsConnections)
}

func (srv *serverDevToolsConnections) WithMetrics() {
	srv.Wrap(metricsMiddlewareDevToolsConnections)
}

func (srv *serverDevToolsConnections) WithLog() {
	srv.Wrap(loggerMiddlewareDevToolsConnections())
}
