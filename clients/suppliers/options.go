// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package suppliers

import (
	"crypto/tls"
	"time"

	"github.com/ascenmmo/multiplayer-game-servers/clients/suppliers/cb"
	"github.com/ascenmmo/multiplayer-game-servers/clients/suppliers/jsonrpc"
)

type Option func(cli *ClientJsonRPC)

func (cli *ClientJsonRPC) applyOpts(opts []Option) {
	for _, op := range opts {
		op(cli)
	}
}

func ClientOption(option jsonrpc.Option) Option {
	return func(cli *ClientJsonRPC) {
		cli.rpcOpts = append(cli.rpcOpts, option)
	}
}

func DecodeError(decoder ErrorDecoder) Option {
	return func(cli *ClientJsonRPC) {
		cli.errorDecoder = decoder
	}
}

func Cache(cache cache) Option {
	return func(cli *ClientJsonRPC) {
		cli.cache = cache
	}
}

func CircuitBreaker(cfg cb.Settings) Option {
	return func(cli *ClientJsonRPC) {
		cli.cbCfg = cfg
	}
}

func FallbackTTL(ttl time.Duration) Option {
	return func(cli *ClientJsonRPC) {
		cli.fallbackTTL = ttl
	}
}

func FallbackDevToolsErr(fallback fallbackDevTools) Option {
	return func(cli *ClientJsonRPC) {
		cli.fallbackDevTools = fallback
	}
}

func FallbackDevToolsClientErr(fallback fallbackDevToolsClient) Option {
	return func(cli *ClientJsonRPC) {
		cli.fallbackDevToolsClient = fallback
	}
}

func FallbackDevToolsConnectionsErr(fallback fallbackDevToolsConnections) Option {
	return func(cli *ClientJsonRPC) {
		cli.fallbackDevToolsConnections = fallback
	}
}

func FallbackDevToolsGameConfigsErr(fallback fallbackDevToolsGameConfigs) Option {
	return func(cli *ClientJsonRPC) {
		cli.fallbackDevToolsGameConfigs = fallback
	}
}

func FallbackDevToolsServerErr(fallback fallbackDevToolsServer) Option {
	return func(cli *ClientJsonRPC) {
		cli.fallbackDevToolsServer = fallback
	}
}

func FallbackDevelopersErr(fallback fallbackDevelopers) Option {
	return func(cli *ClientJsonRPC) {
		cli.fallbackDevelopers = fallback
	}
}

func Headers(headers ...interface{}) Option {
	return func(cli *ClientJsonRPC) {
		cli.rpcOpts = append(cli.rpcOpts, jsonrpc.HeaderFromCtx(headers...))
	}
}

func ConfigTLS(tlsConfig *tls.Config) Option {
	return func(cli *ClientJsonRPC) {
		cli.rpcOpts = append(cli.rpcOpts, jsonrpc.ConfigTLS(tlsConfig))
	}
}

func LogRequest() Option {
	return func(cli *ClientJsonRPC) {
		cli.rpcOpts = append(cli.rpcOpts, jsonrpc.LogRequest())
	}
}

func LogOnError() Option {
	return func(cli *ClientJsonRPC) {
		cli.rpcOpts = append(cli.rpcOpts, jsonrpc.LogOnError())
	}
}
