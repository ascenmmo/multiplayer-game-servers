// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package suppliers

import (
	"context"
	"fmt"

	"github.com/ascenmmo/multiplayer-game-servers/clients/suppliers/jsonrpc"
	"github.com/ascenmmo/multiplayer-game-servers/pkg/multiplayer/types"
	"github.com/google/uuid"
)

type ClientDevToolsGameConfigs struct {
	*ClientJsonRPC
}

type retDevToolsGameConfigsCreateOrUpdateConfig = func(err error)
type retDevToolsGameConfigsGetGameConfig = func(configs types.GameConfigs, err error)
type retDevToolsGameConfigsGetGameResultConfigPreview = func(gameResult types.GameConfigResults, err error)

func (cli *ClientDevToolsGameConfigs) CreateOrUpdateConfig(ctx context.Context, token string, configs types.GameConfigs) (err error) {

	request := requestDevToolsGameConfigsCreateOrUpdateConfig{
		Configs: configs,
		Token:   token,
	}
	var response responseDevToolsGameConfigsCreateOrUpdateConfig
	var rpcResponse *jsonrpc.ResponseRPC
	if rpcResponse, err = cli.rpc.Call(ctx, "devtoolsgameconfigs.createorupdateconfig", request); err != nil || rpcResponse == nil {
		return
	}
	if rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
		return
	}
	if err = rpcResponse.GetObject(&response); err != nil {
		return
	}
	return err
}

func (cli *ClientDevToolsGameConfigs) ReqCreateOrUpdateConfig(ctx context.Context, callback retDevToolsGameConfigsCreateOrUpdateConfig, token string, configs types.GameConfigs) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "devtoolsgameconfigs.createorupdateconfig",
		Params: requestDevToolsGameConfigsCreateOrUpdateConfig{
			Configs: configs,
			Token:   token,
		},
	}}
	if callback != nil {
		var response responseDevToolsGameConfigsCreateOrUpdateConfig
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			if err == nil && rpcResponse != nil {
				if rpcResponse.Error != nil {
					if cli.errorDecoder != nil {
						err = cli.errorDecoder(rpcResponse.Error.Raw())
					} else {
						err = fmt.Errorf(rpcResponse.Error.Message)
					}
				} else {
					err = rpcResponse.GetObject(&response)
				}
			}
			callback(err)
		}
	}
	return
}

func (cli *ClientDevToolsGameConfigs) GetGameConfig(ctx context.Context, token string, gameID uuid.UUID) (configs types.GameConfigs, err error) {

	request := requestDevToolsGameConfigsGetGameConfig{
		GameID: gameID,
		Token:  token,
	}
	var response responseDevToolsGameConfigsGetGameConfig
	var rpcResponse *jsonrpc.ResponseRPC
	if rpcResponse, err = cli.rpc.Call(ctx, "devtoolsgameconfigs.getgameconfig", request); err != nil || rpcResponse == nil {
		return
	}
	if rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
		return
	}
	if err = rpcResponse.GetObject(&response); err != nil {
		return
	}
	return response.Configs, err
}

func (cli *ClientDevToolsGameConfigs) ReqGetGameConfig(ctx context.Context, callback retDevToolsGameConfigsGetGameConfig, token string, gameID uuid.UUID) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "devtoolsgameconfigs.getgameconfig",
		Params: requestDevToolsGameConfigsGetGameConfig{
			GameID: gameID,
			Token:  token,
		},
	}}
	if callback != nil {
		var response responseDevToolsGameConfigsGetGameConfig
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			if err == nil && rpcResponse != nil {
				if rpcResponse.Error != nil {
					if cli.errorDecoder != nil {
						err = cli.errorDecoder(rpcResponse.Error.Raw())
					} else {
						err = fmt.Errorf(rpcResponse.Error.Message)
					}
				} else {
					err = rpcResponse.GetObject(&response)
				}
			}
			callback(response.Configs, err)
		}
	}
	return
}

func (cli *ClientDevToolsGameConfigs) GetGameResultConfigPreview(ctx context.Context, token string, gameID uuid.UUID) (gameResult types.GameConfigResults, err error) {

	request := requestDevToolsGameConfigsGetGameResultConfigPreview{
		GameID: gameID,
		Token:  token,
	}
	var response responseDevToolsGameConfigsGetGameResultConfigPreview
	var rpcResponse *jsonrpc.ResponseRPC
	if rpcResponse, err = cli.rpc.Call(ctx, "devtoolsgameconfigs.getgameresultconfigpreview", request); err != nil || rpcResponse == nil {
		return
	}
	if rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
		return
	}
	if err = rpcResponse.GetObject(&response); err != nil {
		return
	}
	return response.GameResult, err
}

func (cli *ClientDevToolsGameConfigs) ReqGetGameResultConfigPreview(ctx context.Context, callback retDevToolsGameConfigsGetGameResultConfigPreview, token string, gameID uuid.UUID) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "devtoolsgameconfigs.getgameresultconfigpreview",
		Params: requestDevToolsGameConfigsGetGameResultConfigPreview{
			GameID: gameID,
			Token:  token,
		},
	}}
	if callback != nil {
		var response responseDevToolsGameConfigsGetGameResultConfigPreview
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			if err == nil && rpcResponse != nil {
				if rpcResponse.Error != nil {
					if cli.errorDecoder != nil {
						err = cli.errorDecoder(rpcResponse.Error.Raw())
					} else {
						err = fmt.Errorf(rpcResponse.Error.Message)
					}
				} else {
					err = rpcResponse.GetObject(&response)
				}
			}
			callback(response.GameResult, err)
		}
	}
	return
}
